using StupidTemplate.Classes;
using StupidTemplate.Mods;
using static StupidTemplate.Settings;

namespace StupidTemplate.Menu
{
    internal class Buttons
    {
        public static ButtonInfo[][] buttons = new ButtonInfo[][]
        {
            new ButtonInfo[] { // Main Mods
                new ButtonInfo { buttonText = "Settings", method =() => SettingsMods.EnterSettings(), isTogglable = false, toolTip = "Opens the main settings page for the menu."},
                new ButtonInfo { buttonText = "Movement", method =() => AllMods.EnterMovement(), isTogglable = false, toolTip = "Gos to the movement page of the menu."},
                new ButtonInfo { buttonText = "Trolling", method =() => AllMods.EnterTrolling(), isTogglable = false, toolTip = "Gos to the trolling page of the menu."},
                new ButtonInfo { buttonText = "Rig", method =() => AllMods.EnterRig(), isTogglable = false, toolTip = "Gos to the rig page of the menu."},
                new ButtonInfo { buttonText = "Guns", method =() => AllMods.EnterGuns(), isTogglable = false, toolTip = "Gos to the guns page of the menu."},
                new ButtonInfo { buttonText = "Game", method =() => AllMods.EnterGame(), isTogglable = false, toolTip = "Gos to the game page of the menu."},
                new ButtonInfo { buttonText = "Visuals", method =() => AllMods.EnterVisuals(), isTogglable = false, toolTip = "Gos to the visuals page of the menu."},
                new ButtonInfo { buttonText = "Data", method =() => AllMods.EnterData(), isTogglable = false, toolTip = "Gos to the data page of the menu."},
                new ButtonInfo { buttonText = "Over Tagged", method =() => AllMods.EnterOverTagged(), isTogglable = false, toolTip = "Gos to the over tagged page of the menu."},
                new ButtonInfo { buttonText = "Overpowered", method =() => AllMods.EnterOverpowered(), isTogglable = false, toolTip = "Gos to the overpowered page of the menu."},
                new ButtonInfo { buttonText = "Photon", method =() => AllMods.EnterPhoton(), isTogglable = false, toolTip = "Gos to the photon page of the menu."},
            },

            new ButtonInfo[] { // Settings
                new ButtonInfo { buttonText = "Return to Main", method =() => Global.ReturnHome(), isTogglable = false, toolTip = "Returns to the main page of the menu."},
                new ButtonInfo { buttonText = "Menu", method =() => SettingsMods.MenuSettings(), isTogglable = false, toolTip = "Opens the settings for the menu."},
                new ButtonInfo { buttonText = "Movement", method =() => SettingsMods.MovementSettings(), isTogglable = false, toolTip = "Opens the movement settings for the menu."},
                new ButtonInfo { buttonText = "Projectile", method =() => SettingsMods.ProjectileSettings(), isTogglable = false, toolTip = "Opens the projectile settings for the menu."},
            },

            new ButtonInfo[] { // Menu Settings
                new ButtonInfo { buttonText = "Return to Settings", method =() => SettingsMods.EnterSettings(), isTogglable = false, toolTip = "Returns to the main settings page for the menu."},
                new ButtonInfo { buttonText = "Right Hand", enableMethod =() => SettingsMods.RightHand(), disableMethod =() => SettingsMods.LeftHand(), toolTip = "Puts the menu on your right hand."},
                new ButtonInfo { buttonText = "Notifications", enableMethod =() => SettingsMods.EnableNotifications(), disableMethod =() => SettingsMods.DisableNotifications(), enabled = !disableNotifications, toolTip = "Toggles the notifications."},
                new ButtonInfo { buttonText = "FPS Counter", enableMethod =() => SettingsMods.EnableFPSCounter(), disableMethod =() => SettingsMods.DisableFPSCounter(), enabled = fpsCounter, toolTip = "Toggles the FPS counter."},
                new ButtonInfo { buttonText = "Disconnect Button", enableMethod =() => SettingsMods.EnableDisconnectButton(), disableMethod =() => SettingsMods.DisableDisconnectButton(), enabled = disconnectButton, toolTip = "Toggles the disconnect button."},
            },

            new ButtonInfo[] { // Movement Settings
                new ButtonInfo { buttonText = "Return to Settings", method =() => SettingsMods.EnterSettings(), isTogglable = false, toolTip = "Returns to the main settings page for the menu."},
            },

            new ButtonInfo[] { // Projectile Settings
                new ButtonInfo { buttonText = "Return to Settings", method =() => SettingsMods.MenuSettings(), isTogglable = false, toolTip = "Opens the settings for the menu."},
            },

            new ButtonInfo[] { // Movement
                new ButtonInfo { buttonText = "Return to Main", method =() => Global.ReturnHome(), isTogglable = false, toolTip = "Returns to the main page of the menu."},
                new ButtonInfo { buttonText = "Speedboost", method =() => AllMods.Speedboost(), isTogglable = true, toolTip = "Doubles your max jump speed and jump multiplier."},
                new ButtonInfo { buttonText = "Mosa Speedboost", method =() => AllMods.MosaSpeedboost(), isTogglable = true, toolTip = "Multiplies your max jump speed and jump multiplier by 1.25."},
                new ButtonInfo { buttonText = "Fly", method =() => AllMods.Fly(), isTogglable = true, toolTip = "Fly around."},
                new ButtonInfo { buttonText = "Grip Fly", method =() => AllMods.GripFly(), isTogglable = true, toolTip = "Fly around with the grip buttons."},
                new ButtonInfo { buttonText = "Trigger Fly", method =() => AllMods.TriggerFly(), isTogglable = true, toolTip = "Fly around with the trigger buttons."},
                new ButtonInfo { buttonText = "High Gravity", method =() => AllMods.HighGravity(), isTogglable = true, toolTip = "Doubles your gravity."},
                new ButtonInfo { buttonText = "Low Gravity", method =() => AllMods.LowGravity(), isTogglable = true, toolTip = "Halfs your gravity."},
                new ButtonInfo { buttonText = "Zero Gravity", method =() => AllMods.ZeroGravity(), isTogglable = true, toolTip = "You aren't affected by gravity."},
                new ButtonInfo { buttonText = "Flip Gravity", method =() => AllMods.FlipGravity(), isTogglable = true, toolTip = "Flips gravity."},
                new ButtonInfo { buttonText = "Disable Movement", method =() => AllMods.DisableMovement(), isTogglable = false, toolTip = "Disables your movement so that you can't move."},
                new ButtonInfo { buttonText = "Enable Movement", method =() => AllMods.EnableMovement(), isTogglable = false, toolTip = "Enables your movement."},
                new ButtonInfo { buttonText = "No Max Jump Speed", method =() => AllMods.NoMaxJumpSpeed(), isTogglable = true, toolTip = "You can jump as fast as you want."},
                new ButtonInfo { buttonText = "Hand Fly", method =() => AllMods.HandFly(), isTogglable = true, toolTip = "Fly with your hands."},
                new ButtonInfo { buttonText = "Grip Hand Fly", method =() => AllMods.GripHandFly(), isTogglable = true, toolTip = "Fly with your hands using the grip buttons."},
                new ButtonInfo { buttonText = "Trigger Hand Fly", method =() => AllMods.TriggerHandFly(), isTogglable = true, toolTip = "Fly with your hands using the trigger buttons."},
                new ButtonInfo { buttonText = "No Jump Multiplier", method =() => AllMods.NoJumpMultiplier(), isTogglable = true, toolTip = "Your jumps wont be multiplied they will instead be multiplied by 1."},
                new ButtonInfo { buttonText = "Car Monke", method =() => AllMods.CarMonke(), isTogglable = true, toolTip = "Drive around."},
                new ButtonInfo { buttonText = "No Velocity Limit", method =() => AllMods.NoVelocityLimit(), isTogglable = true, toolTip = "Sets your velocity limit to 0."},
                new ButtonInfo { buttonText = "Long Arms Offset", method =() => AllMods.LongArmsOffset(), isTogglable = false, toolTip = "Your hands have a slight offset to make it look like you have long arms."},
                new ButtonInfo { buttonText = "Reset Left Hand Offset", method =() => AllMods.ResetLeftHandOffset(), isTogglable = false, toolTip = "Sets your left hand offset back to its original state."},
                new ButtonInfo { buttonText = "Reset Right Hand Offset", method =() => AllMods.ResetRightHandOffset(), isTogglable = false, toolTip = "Sets your right hand offset back to its original state."},
                new ButtonInfo { buttonText = "Reset Arm Offsets", method =() => AllMods.ResetArmOffsets(), isTogglable = false, toolTip = "Sets your left and right hand offset back to its original states."},
                new ButtonInfo { buttonText = "Up And Down", method =() => AllMods.UpAndDown(), isTogglable = true, toolTip = "Move up and down."},
                new ButtonInfo { buttonText = "Forwards And Backwards", method =() => AllMods.ForwardsAndBackwards(), isTogglable = true, toolTip = "Move forwards and backwards."},
                new ButtonInfo { buttonText = "Left And Right", method =() => AllMods.LeftAndRight(), isTogglable = true, toolTip = "Move left and right."},
                new ButtonInfo { buttonText = "Change Pull Power", method =() => AllMods.ChangePullPower(), isTogglable = false, toolTip = "Changes the pull power for the pull mod."},
                new ButtonInfo { buttonText = "Pull", method =() => AllMods.Pull(), isTogglable = true, toolTip = "Teleports you in the direction you're going."},
                new ButtonInfo { buttonText = "Backwards Walk", method =() => AllMods.BackwardsWalk(), isTogglable = true, toolTip = "Inverses the direction you're going in."},
                new ButtonInfo { buttonText = "Steam Long Arms", method =() => AllMods.SteamLongArms(), isTogglable = false, toolTip = "Sets your local scale to your max arm length."},
                new ButtonInfo { buttonText = "Short Arms", method =() => AllMods.ShortArms(), isTogglable = false, toolTip = "Halfs your local scale."},
                new ButtonInfo { buttonText = "Reset Local Scale", method =() => AllMods.ResetLocalScale(), isTogglable = false, toolTip = "Sets your local scale back to 1."},
                new ButtonInfo { buttonText = "Always Max Velocity", method =() => AllMods.AlwaysMaxVelocity(), isTogglable = true, toolTip = "Sets your jump multiplier to infinity."},
                new ButtonInfo { buttonText = "No Tag Freeze", method =() => AllMods.NoTagFreeze(), isTogglable = true, toolTip = "You wont get tag freeze after getting tagged."},
                new ButtonInfo { buttonText = "Platforms", method =() => AllMods.Platforms(), isTogglable = true, toolTip = "Create platforms to stand on using the grip buttons."},
                new ButtonInfo { buttonText = "Invisible Sticky Platforms", method =() => AllMods.InvisibleStickyPlatforms(), isTogglable = true, toolTip = "Create invisible sticky platforms to stand on using the grip buttons."},
                new ButtonInfo { buttonText = "Change Wall Walk Power", method =() => AllMods.ChangeWallWalkPower(), isTogglable = false, toolTip = "Changes the power of wall walk for the wall walk mod."},
                new ButtonInfo { buttonText = "Wall Walk", method =() => AllMods.WallWalk(), isTogglable = true, toolTip = "Practice or walk on walls."},
                new ButtonInfo { buttonText = "Easy Un Stick", method =() => AllMods.EasyUnStick(), isTogglable = false, toolTip = "Sets your un stick distance to 0."},
                new ButtonInfo { buttonText = "Reset Un Stick Distance", method =() => AllMods.ResetUnStickDistance(), isTogglable = false, toolTip = "Sets your un stick distance back to its original state."},
                new ButtonInfo { buttonText = "Slide Control", method =() => AllMods.SlideControl(), isTogglable = false, toolTip = "Sets your slide control to 1."},
                new ButtonInfo { buttonText = "Reset Slide Control", method =() => AllMods.ResetSlideControl(), isTogglable = false, toolTip = "Sets your slide control back to its original state."},
                new ButtonInfo { buttonText = "Noclip Fly", method =() => AllMods.NoclipFly(), isTogglable = true, toolTip = "Use noclip and fly at the same time."},
                new ButtonInfo { buttonText = "Trigger Noclip Fly", method =() => AllMods.TriggerNoclipFly(), isTogglable = true, toolTip = "Use noclip and fly at the same time using the trigger buttons."},
                new ButtonInfo { buttonText = "Grip Noclip Fly", method =() => AllMods.GripNoclipFly(), isTogglable = true, toolTip = "Use noclip and fly at the same time using the grip buttons."},
                new ButtonInfo { buttonText = "Jump Speed Boost", method =() => AllMods.JumpSpeedBoost(), isTogglable = true, toolTip = "Doubles your max jump speed."},
                new ButtonInfo { buttonText = "Mosa Jump Speed Boost", method =() => AllMods.MosaJumpSpeedBoost(), isTogglable = true, toolTip = "Multiplies your max jump speed by 1.25."},
                new ButtonInfo { buttonText = "Jump Multiplier Boost", method =() => AllMods.JumpMultiplierBoost(), isTogglable = true, toolTip = "Doubles your jump multiplier."},
                new ButtonInfo { buttonText = "Mosa Jump Multiplier Boost", method =() => AllMods.MosaJumpMultiplierBoost(), isTogglable = true, toolTip = "Multiplies your jump multiplier by 1.25."},
                new ButtonInfo { buttonText = "Enable Kinematic Rigid Body", method =() => AllMods.EnableKinematicRigidBody(), isTogglable = false, toolTip = "Makes your rigid body kinematic."},
                new ButtonInfo { buttonText = "Disable Kinematic Rigid Body", method =() => AllMods.DisableKinematicRigidBody(), isTogglable = false, toolTip = "Makes your rigid body non-kinematic."},
                new ButtonInfo { buttonText = "No Arm Offsets", method =() => AllMods.NoArmOffsets(), isTogglable = false, toolTip = "Sets both your left and right hand offset to 0."},
                new ButtonInfo { buttonText = "No Left Hand Offset", method =() => AllMods.NoLeftHandOffset(), isTogglable = false, toolTip = "Sets your left hand offset to 0."},
                new ButtonInfo { buttonText = "No Right Hand Offset", method =() => AllMods.NoRightHandOffset(), isTogglable = false, toolTip = "Sets your right hand offset to 0."},
                new ButtonInfo { buttonText = "Fling Self", method =() => AllMods.FlingSelf(), isTogglable = false, toolTip = "Flings you in the air."},
                new ButtonInfo { buttonText = "Fast Fly", method =() => AllMods.FastFly(), isTogglable = true, toolTip = "Fly 2x faster."},
                new ButtonInfo { buttonText = "Trigger Fast Fly", method =() => AllMods.TriggerFastFly(), isTogglable = true, toolTip = "Fly 2x faster using the trigger buttons."},
                new ButtonInfo { buttonText = "Grip Fast Fly", method =() => AllMods.GripFastFly(), isTogglable = true, toolTip = "Fly 2x faster using the grip buttons."},
                new ButtonInfo { buttonText = "Multiplied Velocity", method =() => AllMods.MultipliedVelocity(), isTogglable = true, toolTip = "Adds your velocity to your velocity every second."},
                new ButtonInfo { buttonText = "Mosa Multiplied Velocity", method =() => AllMods.MosaMultipliedVelocity(), isTogglable = true, toolTip = "Adds your velocity to your velocity multiplied by 0.25 every second."},
                new ButtonInfo { buttonText = "Divided Velocity", method =() => AllMods.DividedVelocity(), isTogglable = true, toolTip = "Divides your velocity by 2 every second."},
                new ButtonInfo { buttonText = "Doubled Velocity", method =() => AllMods.DoubledVelocity(), isTogglable = true, toolTip = "Pushes you in the direction of your velocity."},
                new ButtonInfo { buttonText = "Halfed Velocity", method =() => AllMods.HalfedVelocity(), isTogglable = true, toolTip = "Pushes you in the inverse direction of your velocity divided by 2."},
                new ButtonInfo { buttonText = "Halfed Jump Multiplier", method =() => AllMods.HalfedJumpMultiplier(), isTogglable = true, toolTip = "Halfs your jump multiplier."},
                new ButtonInfo { buttonText = "Normalized Velocity", method =() => AllMods.NormalizedVelocity(), isTogglable = true, toolTip = "Normalizes your velocity and multiplies it by your max jump speed every frame."},
                new ButtonInfo { buttonText = "Ground Assist", method =() => AllMods.GroundAssist(), isTogglable = true, toolTip = "Helps you run faster and more forwards."},
                new ButtonInfo { buttonText = "Change Anti World Scale Check Multiplier", method =() => AllMods.ChangeAntiWorldScaleCheckMultiplier(), isTogglable = false, toolTip = "Changes the multiplier for the anti world scale check mod."},
                new ButtonInfo { buttonText = "Anti World Scale Check", method =() => AllMods.AntiWorldScaleCheck(), isTogglable = true, toolTip = "Prevents you from failing a world scale check."},
                new ButtonInfo { buttonText = "Slow Motion Movement", method =() => AllMods.SlowMotionMovement(), isTogglable = true, toolTip = "You can see your movement in 0.5 speed."},
                new ButtonInfo { buttonText = "Halfed Jump Speed", method =() => AllMods.HalfedJumpSpeed(), isTogglable = true, toolTip = "Halfs your max jump speed."},
                new ButtonInfo { buttonText = "Slowboost", method =() => AllMods.Slowboost(), isTogglable = true, toolTip = "Inverse of Speedboost."},
                new ButtonInfo { buttonText = "Checkpoint", method =() => AllMods.Checkpoint(), isTogglable = true, toolTip = "Press the primary button to set the checkpoint position press the trigger to teleport to it."},
                new ButtonInfo { buttonText = "Pathfinding Checkpoint", method =() => AllMods.PathfindingCheckpoint(), isTogglable = true, toolTip = "Press the primary button to set the checkpoint position press the trigger to travel to it."},
                new ButtonInfo { buttonText = "Grip Speedboost", method =() => AllMods.GripSpeedboost(), isTogglable = true, toolTip = "Press your grips to enable speedboost."},
                new ButtonInfo { buttonText = "Trigger Speedboost", method =() => AllMods.TriggerSpeedboost(), isTogglable = true, toolTip = "Press your triggers to enable speedboost."},
                new ButtonInfo { buttonText = "Primary Button Speedboost", method =() => AllMods.PrimaryButtonSpeedboost(), isTogglable = true, toolTip = "Press your primary buttons to enable speedboost."},
                new ButtonInfo { buttonText = "Grip Mosa Speedboost", method =() => AllMods.GripSpeedboost(), isTogglable = true, toolTip = "Press your grips to enable mosa speedboost."},
                new ButtonInfo { buttonText = "Trigger Mosa Speedboost", method =() => AllMods.TriggerMosaSpeedboost(), isTogglable = true, toolTip = "Press your triggers to enable mosa speedboost."},
                new ButtonInfo { buttonText = "Primary Button Mosa Speedboost", method =() => AllMods.PrimaryButtonMosaSpeedboost(), isTogglable = true, toolTip = "Press your primary buttons to enable mosa speedboost."},
                new ButtonInfo { buttonText = "Mark Position", method =() => AllMods.MarkPosition(), isTogglable = true, toolTip = "Mark any position."},
                new ButtonInfo { buttonText = "Button Spam Marked Position", method =() => AllMods.ButtonSpamMarkedPosition(), isTogglable = true, toolTip = "If theres a button on the position you marked then you can spam the button."},
                new ButtonInfo { buttonText = "No Velocity Average", method =() => AllMods.NoVelocityAverage(), isTogglable = true, toolTip = "Removes your velocity average so you can juke better."},
                new ButtonInfo { buttonText = "No Slide Control", method =() => AllMods.NoSlideControl(), isTogglable = false, toolTip = "You can't control your slide on ice."},
                new ButtonInfo { buttonText = "Full Slide Factor", method =() => AllMods.FullSlideFactor(), isTogglable = false, toolTip = "Your default slide factor is set to 1."},
                new ButtonInfo { buttonText = "Full Precision", method =() => AllMods.FullPrecision(), isTogglable = false, toolTip = "Your default precision is set to 1 helps you from slipping on walls a bit."},
                new ButtonInfo { buttonText = "Reset Default Precision", method =() => AllMods.ResetDefaultPrecision(), isTogglable = false, toolTip = "Sets your default precision back to its original state."},
                new ButtonInfo { buttonText = "Reset Default Slide Factor", method =() => AllMods.ResetDefaultSlideFactor(), isTogglable = false, toolTip = "Sets your default slide factor back to its original state."},
                new ButtonInfo { buttonText = "Disabled Rigid Body", method =() => AllMods.DisabledRigidBody(), isTogglable = true, toolTip = "You aren't affected by gravity and your velocity will always be zero."},
            },

            new ButtonInfo[] { // Trolling
                new ButtonInfo { buttonText = "Return to Main", method =() => Global.ReturnHome(), isTogglable = false, toolTip = "Returns to the main page of the menu."},
                new ButtonInfo { buttonText = "Noclip", method =() => AllMods.Noclip(), isTogglable = true, toolTip = "Disables all colliders."},
                new ButtonInfo { buttonText = "Grip Noclip", method =() => AllMods.GripNoclip(), isTogglable = true, toolTip = "Disables all colliders using the grip buttons."},
                new ButtonInfo { buttonText = "Trigger Noclip", method =() => AllMods.TriggerNoclip(), isTogglable = true, toolTip = "Disables all colliders using the trigger buttons."},
                new ButtonInfo { buttonText = "Ghost Monke", method =() => AllMods.GhostMonke(), isTogglable = true, toolTip = "Troll as a ghost."},
                new ButtonInfo { buttonText = "Trigger Ghost Monke", method =() => AllMods.TriggerGhostMonke(), isTogglable = true, toolTip = "Troll as a ghost using the trigger buttons."},
                new ButtonInfo { buttonText = "Grip Ghost Monke", method =() => AllMods.GripGhostMonke(), isTogglable = true, toolTip = "Troll as a ghost using the grip buttons."},
                new ButtonInfo { buttonText = "Update Rig", method =() => AllMods.UpdateRig(), isTogglable = true, toolTip = "Press the primary buttons to update your rig."},
                new ButtonInfo { buttonText = "Trigger Update Rig", method =() => AllMods.TriggerUpdateRig(), isTogglable = true, toolTip = "Press the trigger buttons to update your rig."},
                new ButtonInfo { buttonText = "Grip Update Rig", method =() => AllMods.GripUpdateRig(), isTogglable = true, toolTip = "Press the grip buttons to update your rig."},
                new ButtonInfo { buttonText = "Toggle Rig", method =() => AllMods.ToggleRig(), isTogglable = true, toolTip = "Press the primary buttons to toggle your rig."},
                new ButtonInfo { buttonText = "Trigger Toggle Rig", method =() => AllMods.TriggerToggleRig(), isTogglable = true, toolTip = "Press the trigger buttons to toggle your rig."},
                new ButtonInfo { buttonText = "Grip Toggle Rig", method =() => AllMods.GripToggleRig(), isTogglable = true, toolTip = "Press the grip buttons to toggle your rig."},
                new ButtonInfo { buttonText = "Disable Rig", method =() => AllMods.DisableRig(), isTogglable = false, toolTip = "Disables your rig."},
                new ButtonInfo { buttonText = "Enable Rig", method =() => AllMods.EnableRig(), isTogglable = false, toolTip = "Enables your rig."},
                new ButtonInfo { buttonText = "No Max Arm Length", method =() => AllMods.NoMaxArmLength(), isTogglable = false, toolTip = "Your arms can as long as you want."},
                new ButtonInfo { buttonText = "Reset Max Arm Length", method =() => AllMods.ResetMaxArmLength(), isTogglable = false, toolTip = "Sets your max arm length back to its original state."},
            },

            new ButtonInfo[] { // Rig
                new ButtonInfo { buttonText = "Return to Main", method =() => Global.ReturnHome(), isTogglable = false, toolTip = "Returns to the main page of the menu."},
                new ButtonInfo { buttonText = "Delayed Camera Position", method =() => AllMods.DelayedCameraPosition(), isTogglable = true, toolTip = "Delays your camera position by 10 frames."},
                new ButtonInfo { buttonText = "Twisted Neck", method =() => AllMods.TwistedNeck(), isTogglable = false, toolTip = "Rotates your head 180 degrees."},
                new ButtonInfo { buttonText = "Reset Head Tracking Rotation Offset", method =() => AllMods.ResetHeadTrackingRotationOffset(), isTogglable = false, toolTip = "Sets your head tracking rotation offset back to its original state."},
                new ButtonInfo { buttonText = "No Finger Movement", method =() => AllMods.NoFingerMovement(), isTogglable = true, toolTip = "Your fingers can't move."},
                new ButtonInfo { buttonText = "Change Advanced Rig Multiplier", method =() => AllMods.ChangeAdvancedRigMultiplier(), isTogglable = false, toolTip = "Sets the multiplier for advanced rig."},
                new ButtonInfo { buttonText = "Advanced Rig", method =() => AllMods.AdvancedRig(), isTogglable = true, toolTip = "Your rig gos to your predicted position."},
                new ButtonInfo { buttonText = "Reset Offline VR Rig Offsets", method =() => AllMods.ResetOfflineVRRigOffsets(), isTogglable = false, toolTip = "Sets all the offsets in your offline vr rig back to its original states."},
            },

            new ButtonInfo[] { // Guns
                new ButtonInfo { buttonText = "Return to Main", method =() => Global.ReturnHome(), isTogglable = false, toolTip = "Returns to the main page of the menu."},
                new ButtonInfo { buttonText = "Change Black Hole Mass", method =() => AllMods.ChangeBlackHoleMass(), isTogglable = false, toolTip = "Changes the mass of the black hole for black hole gun."},
                new ButtonInfo { buttonText = "Black Hole Gun", method =() => AllMods.BlackHoleGun(), isTogglable = true, toolTip = "Creates a black hole with a gun."},
                new ButtonInfo { buttonText = "Change White Hole Mass", method =() => AllMods.ChangeWhiteHoleMass(), isTogglable = false, toolTip = "Changes the mass of the white hole for white hole gun."},
                new ButtonInfo { buttonText = "White Hole Gun", method =() => AllMods.WhiteHoleGun(), isTogglable = true, toolTip = "Creates a white hole with a gun."},
            },

            new ButtonInfo[] { // Game
                new ButtonInfo { buttonText = "Return to Main", method =() => Global.ReturnHome(), isTogglable = false, toolTip = "Returns to the main page of the menu."},
                new ButtonInfo { buttonText = "Restart Game", method =() => AllMods.RestartGame(), isTogglable = false, toolTip = "Restarts gorilla tag."},
                new ButtonInfo { buttonText = "Quit Game", method =() => AllMods.QuitGame(), isTogglable = false, toolTip = "Quits gorilla tag."},
            },
            
            new ButtonInfo[] { // Visuals
                new ButtonInfo { buttonText = "Return to Main", method =() => Global.ReturnHome(), isTogglable = false, toolTip = "Returns to the main page of the menu."},
                new ButtonInfo { buttonText = "Visual Debugging", method =() => AllMods.VisualDebugging(), isTogglable = true, toolTip = "Shows everything you need to know."},
                new ButtonInfo { buttonText = "Show Coordinate Lines", method =() => AllMods.ShowCoordinateLines(), isTogglable = true, toolTip = "Shows the xyz directions as lines infront of your character."},
                new ButtonInfo { buttonText = "Show Velocities", method =() => AllMods.ShowVelocities(), isTogglable = true, toolTip = "Shows your velocities as lines."},
                new ButtonInfo { buttonText = "Show Normals", method =() => AllMods.ShowNormals(), isTogglable = true, toolTip = "Shows the normals of the objects your hands hit."},
                new ButtonInfo { buttonText = "Show Distances Traveled", method =() => AllMods.ShowDistancesTraveled(), isTogglable = true, toolTip = "Shows the distances your hands are trying to travel."},
                new ButtonInfo { buttonText = "Show Un Stick Distance", method =() => AllMods.ShowUnStickDistance(), isTogglable = true, toolTip = "Shows the un stick distance for your hands."},
                new ButtonInfo { buttonText = "Show Velocity Average", method =() => AllMods.ShowVelocityAverage(), isTogglable = true, toolTip = "Shows your denormalized velocity average."},
                new ButtonInfo { buttonText = "Show Velocity", method =() => AllMods.ShowVelocity(), isTogglable = true, toolTip = "Shows your velocity."},
                new ButtonInfo { buttonText = "Show Predicted Positions", method =() => AllMods.ShowPredictedPositions(), isTogglable = true, toolTip = "Predicts and shows where you will go."},
                new ButtonInfo { buttonText = "Show Longest Jump", method =() => AllMods.ShowLongestJump(), isTogglable = true, toolTip = "Shows the longest jump you've ever made and creates a line."},
                new ButtonInfo { buttonText = "Reset Longest Jump", method =() => AllMods.ResetLongestJump(), isTogglable = false, toolTip = "Resets the longest jump you've made for the show longest jump mod."},
                new ButtonInfo { buttonText = "Notify Jump Info", method =() => AllMods.NotifyJumpInfo(), isTogglable = true, toolTip = "Notifys the infos of every jump you've made."},
                new ButtonInfo { buttonText = "Clear All Notifications", method =() => AllMods.ClearAllNotifications(), isTogglable = false, toolTip = "Clears every notification."},
            },

            new ButtonInfo[] { // Data
                new ButtonInfo { buttonText = "Return to Main", method =() => Global.ReturnHome(), isTogglable = false, toolTip = "Returns to the main page of the menu."},
                new ButtonInfo { buttonText = "Notify Self ID", method =() => AllMods.NotifySelfID(), isTogglable = false, toolTip = "Notifys your player id."},
                new ButtonInfo { buttonText = "Notify Player ID", method =() => AllMods.NotifyPlayerID(), isTogglable = true, toolTip = "Gives you a gun that reads and notifys player ids."},
            },

            new ButtonInfo[] { // Over Tagged
                new ButtonInfo { buttonText = "Return to Main", method =() => Global.ReturnHome(), isTogglable = false, toolTip = "Returns to the main page of the menu."},
                new ButtonInfo { buttonText = "Disable Alls Movement", method =() => AllMods.DisableAllsMovement(), isTogglable = false, toolTip = "Disables everyones movement so that they all can't move."},
                new ButtonInfo { buttonText = "Enable Alls Movement", method =() => AllMods.EnableAllsMovement(), isTogglable = false, toolTip = "Enables alls movement."},
            },

            new ButtonInfo[] { // Overpowered
                new ButtonInfo { buttonText = "Return to Main", method =() => Global.ReturnHome(), isTogglable = false, toolTip = "Returns to the main page of the menu."},
                new ButtonInfo { buttonText = "Disable Others Movement", method =() => AllMods.DisableOthersMovement(), isTogglable = false, toolTip = "Disables others movement so that they can't move."},
                new ButtonInfo { buttonText = "Enable Others Movement", method =() => AllMods.EnableOthersMovement(), isTogglable = false, toolTip = "Enables others movement."},
            },

            new ButtonInfo[] { // Photon
                new ButtonInfo { buttonText = "Return to Main", method =() => Global.ReturnHome(), isTogglable = false, toolTip = "Returns to the main page of the menu."},
                new ButtonInfo { buttonText = "Notify Is Master Cilent", method =() => AllMods.NotifyIsMasterCilent(), isTogglable = false, toolTip = "Shows if you're master cilent or not."},
            }
        };
    }
}
